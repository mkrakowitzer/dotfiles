---
- name: Install kubectl
  ansible.builtin.get_url:
    url: https://dl.k8s.io/release/{{ dev_kubectl_version }}/bin/{{ ansible_system | lower }}/{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}/kubectl
    dest: "{{ ansible_env.HOME }}/.local/bin/kubectl"
    mode: 0755

- name: Check kubectl version
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/kubectl version --client"
  register: kubectl_version
  changed_when: false

- name: Output kubectl version
  ansible.builtin.debug:
    var: kubectl_version.stdout

- name: Download helm
  ansible.builtin.get_url:
    url: https://get.helm.sh/helm-{{ dev_helm_version }}-{{ ansible_system | lower }}-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}.tar.gz
    dest: "/tmp/"
    mode: 0755

- name: Extract helm
  ansible.builtin.unarchive:
    src: "/tmp/helm-{{ dev_helm_version }}-{{ ansible_system | lower }}-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}.tar.gz"
    dest: "/tmp/"
    remote_src: true
    creates: "/tmp/{{ ansible_system | lower }}-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}/helm"

- name: Copy file
  ansible.builtin.copy:
    src: "/tmp/{{ ansible_system | lower }}-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}/helm"
    dest: "{{ ansible_env.HOME }}/.local/bin/"
    remote_src: true
    mode: 0755

- name: Check helm version
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/helm version --client"
  register: helm_version
  changed_when: false

- name: Output helm version
  ansible.builtin.debug:
    var: helm_version.stdout

- name: Install kubectl completion
  ansible.builtin.shell: "{{ ansible_env.HOME }}/.local/bin/kubectl completion zsh > ~/.kubectl-completion"
  args:
    creates: ~/.kubectl-completion

# - name: Create hostfile entries
#   ansible.builtin.lineinfile:
#     path: /etc/hosts
#     line: "{{ item }}"
#     state: present
#   with_items:
#     - "192.168.0.241    worker01"
#     - "192.168.0.242    worker02"
#     - "192.168.0.243    worker03"
#     - "192.168.0.251    cont01"
#     - "192.168.0.252    cont02"
#     - "192.168.0.253    cont03"
#   become: true

- name: Install kind
  ansible.builtin.command: "go install sigs.k8s.io/kind@{{ dev_kind_version }}"
  args:
    creates: "{{ ansible_env.HOME }}/.local/go/bin/kind"
  environment:
    PATH: "{{ ansible_env.HOME }}/.local/go/bin:{{ ansible_env.PATH }}"
    GOBIN: "{{ ansible_env.HOME }}/.local/go/bin"
    GOPATH: "{{ ansible_env.HOME }}/.local/go"

# Docker Ubuntu
- name: Download docker gpg
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: 0644
  become: true
  when: ansible_distribution == 'Ubuntu'

- name: Add docker repo
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/docker.list
    content: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    mode: 0644
    remote_src: true
  become: true
  when: ansible_distribution == 'Ubuntu'

- name: Install docker
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
  become: true
  when: ansible_distribution == 'Ubuntu'

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ dev_username }}"
    groups: docker
    append: true
  become: true
  when: ansible_distribution == 'Ubuntu'

# Docker MacOS
- name: Install docker
  community.general.homebrew:
    name: homebrew/cask/docker
    state: present
  when: ansible_distribution == 'MacOSX'
